/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hust.group11.ecobikerentalgroup11.boundary;

import com.hust.group11.ecobikerentalgroup11.Constants;
import com.hust.group11.ecobikerentalgroup11.DataBase;
import com.hust.group11.ecobikerentalgroup11.Entity.Bike;
import com.hust.group11.ecobikerentalgroup11.Entity.DockingPoint;
import com.hust.group11.ecobikerentalgroup11.Entity.PaymentMethod;
import com.hust.group11.ecobikerentalgroup11.Entity.Transaction;
import com.hust.group11.ecobikerentalgroup11.Entity.User;
import com.hust.group11.ecobikerentalgroup11.MainEntry;
import com.hust.group11.ecobikerentalgroup11.controller.RentBikeController;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPatch;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

/**
 *
 * @author Nguyen Thanh Long
 */
public class PaymentScreen extends javax.swing.JFrame {

    private RentBikeController rbc;
    private JFrame backScreen;
    private PaymentMethod[] paymentMethod;
    private DataBase db;
    private String[] nameMethod;
    private static HttpURLConnection connection;
    private Bike bike;
    private User user;
    private DockingPoint dp;
    private Transaction transaction;

    public PaymentScreen(User user, Bike bike, DockingPoint dp, JFrame backScreen) throws SQLException, Exception {
        initComponents();
        rbc = new RentBikeController();
        this.db = new DataBase();
        this.backScreen = backScreen;
        this.bike = bike;
        this.user = user;
        this.dp = dp;
        rbc.showInfoDeposit(bike, valueBikeModel, valueBike, valueDeposit);
        getPayemntMethod();
    }

    private void getPayemntMethod() {
        try {
            String sqlString = "select * from payment_method";
            ResultSet rs = db.query(sqlString);
            int size = db.getRow(sqlString);
            paymentMethod = new PaymentMethod[size];
            nameMethod = new String[size];
            int i = 0;
            while (rs.next()) {
                paymentMethod[i] = new PaymentMethod("", "", "", 0, 0);
                nameMethod[i] = rs.getString("method_name");
                paymentMethod[i].setNameMethod(rs.getString("method_name"));
                paymentMethod[i].setCvvCode(rs.getInt("cvv_code"));
                paymentMethod[i].setDateExpired(rs.getInt("date_expire"));
                paymentMethod[i].setCardCode(rs.getString("card_code"));
                paymentMethod[i].setNameOwner(rs.getString("owner"));
                i++;
            }
            depositComboBox.setModel(new DefaultComboBoxModel(nameMethod));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        depositComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        confirmCheckBox = new javax.swing.JCheckBox();
        bikeModelLabel = new javax.swing.JLabel();
        valueBikeLabel = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();
        valueBikeModel = new javax.swing.JLabel();
        valueBike = new javax.swing.JLabel();
        depositLabel = new javax.swing.JLabel();
        valueDeposit = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jScrollPane1.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Payment");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        depositComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {}));
        depositComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Choose payment method");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("You have to pay deposit\nequal 40% bike's price\nAfter you return bike, you\nwill receive your deposit.");
        jTextArea1.setToolTipText("");
        jScrollPane2.setViewportView(jTextArea1);

        confirmCheckBox.setText("pay deposit (40% bike's value)");
        confirmCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmCheckBoxActionPerformed(evt);
            }
        });

        bikeModelLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bikeModelLabel.setText("Bike to rent :");

        valueBikeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        valueBikeLabel.setText("Value of bike :");

        confirmButton.setText("confirm pay deposit");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        valueBikeModel.setText("MX_123");

        valueBike.setText("2.000.000 vnd");

        depositLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        depositLabel.setText("Deposit to pay :");

        valueDeposit.setText("800.000 vnd");

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jButton2.setText("Add Payment Method");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleMoveToAddPaymentMethodActionPerformed(evt);
            }
        });

        jLabel2.setText("If you don't have any payment method");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(depositComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valueBikeLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bikeModelLabel)
                                .addGap(67, 67, 67))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(valueDeposit)
                                .addComponent(valueBike)
                                .addComponent(valueBikeModel))
                            .addComponent(confirmButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(depositLabel)
                    .addComponent(confirmCheckBox))
                .addGap(89, 89, 89))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(depositComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bikeModelLabel)
                            .addComponent(valueBikeModel))
                        .addGap(38, 38, 38)))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valueBikeLabel)
                    .addComponent(valueBike))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(depositLabel)
                            .addComponent(valueDeposit)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(confirmCheckBox)
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(confirmButton)
                            .addComponent(jButton1)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void confirmCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confirmCheckBoxActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        for (PaymentMethod paymentMethod1 : paymentMethod) {
            if (paymentMethod1.getNameMethod().equals(depositComboBox.getSelectedItem())) {
                if (confirmCheckBox.isSelected()) {
                    String transactionContent = "Thanh Toan First Group 11";
                    int amount = 100;
                    String command = "pay";
                    LocalDateTime myDateObj = LocalDateTime.now();
                    DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                    String formattedDate = myDateObj.format(myFormatObj);
                    StringBuilder sb = new StringBuilder();
                    sb.append("{"
                            + "\"secretKey\":\"" + Constants.SECRET_KEY + "\","
                            + "\"transaction\":{"
                            + "\"cardCode\":\"" + paymentMethod1.getCardCode() + "\","
                            + "\"owner\":\"" + paymentMethod1.getNameOwner() + "\","
                            + "\"cvvCode\":\"" + paymentMethod1.getCvvCode() + "\","
                            + "\"dateExpired\":\"" + paymentMethod1.getDateExpired() + "\","
                            + "\"command\":\"" + command + "\","
                            + "\"transactionContent\":\"" + transactionContent + "\","
                            + "\"amount\":" + amount + ","
                            + "\"createdAt\":\"" + formattedDate + "\"" + "}}");
                    System.out.println("plaintext: " + sb.toString());
                    String hashString = "";
                    try {
                        MessageDigest md = MessageDigest.getInstance("MD5");
                        md.reset();
                        md.update(sb.toString().getBytes());
                        byte[] thedigest = md.digest();
                        StringBuilder sb1 = new StringBuilder();
                        for (byte b1 : thedigest) {
                            sb1.append(Integer.toHexString(b1 & 0xff).toString());
                        }
                        hashString = sb1.toString();
                        System.out.println("hash string: " + hashString);
                    } catch (NoSuchAlgorithmException ex) {
                        Logger.getLogger(PaymentScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        String result;

                        HttpPatch patch = new HttpPatch("https://ecopark-system-api.herokuapp.com/api/card/processTransaction");
                        patch.addHeader("content-type", "application/json");
                        patch.addHeader("Accept", "application/json");
                        StringBuilder entity = new StringBuilder();
                        entity.append("{"
                                + "\"version\":\"" + Constants.APP_VERSION + "\","
                                + "\"transaction\":{"
                                + "\"cardCode\":\"" + paymentMethod1.getCardCode() + "\","
                                + "\"owner\":\"" + paymentMethod1.getNameOwner() + "\","
                                + "\"cvvCode\":\"" + paymentMethod1.getCvvCode() + "\","
                                + "\"dateExpired\":\"" + paymentMethod1.getDateExpired() + "\","
                                + "\"command\":\"" + command + "\","
                                + "\"transactionContent\":\"" + transactionContent + "\","
                                + "\"amount\":" + amount + ","
                                + "\"createdAt\":\"" + formattedDate + "\"" + "},"
                                + "\"appCode\":\"" + Constants.APP_CODE + "\","
                                + "\"hashCode\":\"" + hashString + "\"" + "}");
                        System.out.println("json content: " + entity.toString());
                        patch.setEntity(new StringEntity(entity.toString()));
                        try (
                                CloseableHttpClient httpClient = HttpClients.createDefault();
                                CloseableHttpResponse response = httpClient.execute(patch)) {
                            result = EntityUtils.toString(response.getEntity());
                        }
                        System.out.println(result);
                        String sqlSetStatusBike = "UPDATE bike SET status = '0' WHERE bike_id = '" + bike.getBikeId() + "'";
                        String sqlSetStatusUser = "UPDATE user SET status = '0' WHERE user_id = '" + user.getUserId() + "'";
                        System.out.println("lockid===============" + dp.getLockId());
                        String sqlSetStatusDockingPoint = "UPDATE docking_lock SET status = '1' WHERE lock_id = '" + dp.getLockId() + "'";
//                        String sqlInsertTransaction = "INSERT INTO transaction VALUES (NULL, '" + bike.getBikeId() + "', '" + user.getUserId() + "', current_timestamp(), NULL, '1', '50004');";

                        System.out.println(sqlSetStatusBike);
                        int pk = db.update(sqlSetStatusBike);
                        int pk2 = db.update(sqlSetStatusUser);
                        int pk4 = db.update(sqlSetStatusDockingPoint);
//                        ResultSet rs3 = db.insert(sqlInsertTransaction);
//                        rs3.next();
//                        int pk3 = rs3.getInt(1);
                        System.out.println("pk: " + pk);
                        System.out.println("pk2: " + pk2);
//                        System.out.println("pk3: " + pk3);
                        System.out.println("pk4: " + pk4);
                        if (pk > 0 && pk2 > 0 && pk4 > 0) {
                            bike.setStatus(1);
                            user.setStatus(1);
                            dp.setStatus(0);
                            String sqlGetTransaction = "SELECT * FROM transaction WHERE user_id = '" + user.getUserId() + "'";
                            ResultSet rs = db.query(sqlGetTransaction);
                            while (rs.next()) {
                                transaction = new Transaction(rs.getString("start_time"), rs.getString("end_time"), rs.getInt("bike_id"), rs.getInt("user_id"), rs.getInt("transaction_id"), rs.getInt("status"), rs.getInt("deposit"));
                                MainEntry.move(this, new RentingScreen(transaction, user, bike, this));
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "update fail");
                        }

                    } catch (MalformedURLException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    } catch (SQLException ex) {
                        Logger.getLogger(PaymentScreen.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void depositComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depositComboBoxActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        MainEntry.move(this, backScreen);
    }//GEN-LAST:event_backActionPerformed

    private void handleMoveToAddPaymentMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleMoveToAddPaymentMethodActionPerformed
        try {
            AddPayentMethodScreen addPayentMethodScreen = new AddPayentMethodScreen(this);
            MainEntry.move(this, addPayentMethodScreen);
        } catch (SQLException ex) {
            Logger.getLogger(PaymentScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_handleMoveToAddPaymentMethodActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bikeModelLabel;
    private javax.swing.JButton confirmButton;
    private javax.swing.JCheckBox confirmCheckBox;
    private javax.swing.JComboBox<String> depositComboBox;
    private javax.swing.JLabel depositLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel valueBike;
    private javax.swing.JLabel valueBikeLabel;
    private javax.swing.JLabel valueBikeModel;
    private javax.swing.JLabel valueDeposit;
    // End of variables declaration//GEN-END:variables
}
